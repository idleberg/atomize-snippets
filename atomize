#!/usr/bin/env ruby

@version = "0.5.1"

# require "builder"
require "json"
require "nokogiri"
require "optparse"

# Arrays of filters to replace characters in strings
@filename_filter =  [
    [/[\x00\/\\:\*\?\"\$<>\|]/, "_"],
    ["\t",  "-"]
]
@title_filter = [
    # [find, replace]
]
@prefix_filter = [
    [/[\x00\/\\:\*\?\"\$<>\|]/, '']
]
@body_filter = [
    # [find, replace]
]
@scope_filter = [
    # https://gist.github.com/idleberg/fca633438329cc5ae317
    [',', ''],
    [/\.?source\.c\+\+/, '.source.cpp'],
    [/\.?source\.java-props/, '.source.java-properties'],
    [/\.?source\.objc\+\+/, '.source.objcpp'],
    [/\.?source\.php/, '.text.html.php'],
    [/\.?source\.scss/, '.source.css.scss'],
    [/\.?source\.todo/, '.text.todo'],
    [/\.?text\.html\.markdown/, '.source.gfm']
]

meta_info = <<-EOF
\natomize-snippets, version #{@version}
The MIT License
Copyright (c) 2015 Jan T. Sott
EOF

# Methods
def read_xml(item)
    puts "\nReading snippet file '#{item}'"

    file = File.read(item)
    xml = Nokogiri::XML(file)

    return xml
end

def read_json(item)
    puts "\nReading completion file '#{item}'"

    file = File.read(item)
    json = JSON.load(file)

    return json
end

def get_outname(type, item)
    if @output == type
        if (@input.start_with? "*.") || ((@input.end_with? ".*"))
            file = item
        else
            file = @input
        end
        output = File.basename(file, ".*")+"."+type
    else
        output = @output
    end

    return output
end

def get_scope(data, mode)
    scope = ""

    if @scope == nil
        scope += "."
        if mode == 'xml'
            scope += data.xpath("//scope")[0].text.strip
        elsif mode == 'json'
            scope += data["scope"]
        end
        scope = filter_str(scope, @scope_filter)
        puts "Using default scope '"+scope+"'"
    else
        if @scope[0] != "."
            scope += "."
        end
        scope += @scope
        puts "Override scope using '"+scope+"'"
    end

    return scope
end

def json_to_cson(json, many = false)

    scope = get_scope(json, 'json')
    
    if many == false
        cson = "'"+scope+"':\n"
    end 

    json["completions"].each do |line|
        trigger  = line["trigger"]
        contents = line["contents"]

        file   = filter_str(trigger, @filename_filter)
        title  = filter_str(trigger, @title_filter)
        prefix = filter_str(trigger, @prefix_filter)
        body   = filter_str(contents, @body_filter)

        if many == true
            cson = "'"+scope+"':\n"
            cson += "  '"+title+"':\n"
            cson += "    'prefix': '"+prefix+"'\n"
            cson += "    'body': '"+body+"'\n"

            puts "Writing '#{file}.cson'"
            File.open("_output/#{file}.cson","w") do |f|
                f.write(cson)
            end
            @output_counter += 1
        else
            cson += "  '"+title+"':\n"
            cson += "    'prefix': '"+prefix+"'\n"
            cson += "    'body': '"+body+"'\n"
        end
    end

    if many == false
        return cson
    end
end

def json_to_json(json, many = false)

    scope = get_scope(json, 'json')

    if many == false
        snippets = Hash.new
    end
    
    json["completions"].each do |line|
        
        trigger  = line["trigger"]
        contents = line["contents"]

        file   = filter_str(trigger, @filename_filter)
        title  = filter_str(trigger, @title_filter)
        prefix = filter_str(trigger, @prefix_filter)
        body   = filter_str(contents, @body_filter)

        if many == true
            obj = {
                scope => {
                    title => {
                        'prefix' => prefix,
                        'body' => body
                    }
                }
            }

            puts "Writing '#{file}.json'"
            File.open("_output/#{file}.json","w") do |f|
              f.write(JSON.pretty_generate(obj))
            end
            @output_counter += 1
        else
            snippets[title] = {
                    'prefix' => prefix,
                    'body' => body
                }
        end
    end

    if many == false
        obj = Hash.new
        obj[scope] = snippets

        return obj
    end

end

def xml_to_cson(xml)
    
    scope = get_scope(xml, 'xml')

    cson = "'"+scope+"':\n"
    
    trigger = xml.xpath("//tabTrigger")[0].text.strip

    file   = filter_str(trigger, @filename_filter)
    title  = filter_str(trigger, @title_filter)
    prefix = filter_str(trigger, @prefix_filter)

    xml.xpath("//content").each do |node|
        contents = node.text.strip

        body   = filter_str(contents, @body_filter)

        cson += "  '"+title+"':\n"
        cson += "    'prefix': '"+prefix+"'\n"
        if body.lines.count <= 1
            cson += "    'body': '"+body+"'\n"
        else
            cson += "    'body': \"\"\"\n"
            body.each_line do |line|
                cson += "      "+line
            end
            cson +="\n    \"\"\"\n"
        end
    end

    return cson
end

def xml_to_json(xml)

    scope = get_scope(xml, 'xml')

    trigger = xml.xpath("//tabTrigger")[0].text.strip
    contents = xml.xpath("//content")[0].text.strip

    file   = filter_str(trigger, @filename_filter)
    title  = filter_str(trigger, @title_filter)
    prefix = filter_str(trigger, @prefix_filter)
    body   = filter_str(contents, @body_filter)
    
    # Create object
    json = {
        scope => {
            title => {
                :prefix => prefix,
                :body => body
            }
        }
    }

    return json
end

def filter_str(input, filter)

    if filter.any?
        filter.each do |needle, replacement|
            input = input.to_s.gsub(needle, replacement)
        end
    end

    return input
end

# default options
@input_counter  = 0
@output_counter = 0

@scope = nil
@merge = false
@split = false
@array = []

args = ARGV.count
 
# parse arguments
ARGV.options do |opts|
    opts.banner = "\nUsage: atomize.rb [options]"

    opts.on("-h", "--help", "prints this help") do
        puts meta_info
        puts opts
        exit
    end

    opts.on("-i", "--input=<file>", String, "Input file(s)") {
        |input| @input = input
    }

    opts.on("-o", "--output=<file>", String, "Output file") {
        |output| @output = output
    }

    # opts.on("-m", "--merge", "merge results into single file") {
    #     if @split != true
    #         @merge = true
    #     else
    #         abort("Error: You can't merge AND split")
    #         # exit
    #     end
    # }

    opts.on("-s", "--scope=<scope>", String, "overwrite scope") {
        |val| @scope = val
    }

    opts.on("-S", "--split", "splits result in single files") {
        if @merge != true
            @split = true
        else
            abort("Error: You can't split AND merge")
            # exit
        end
    }

    opts.on_tail("-v", "--version", "show version") do
        puts @version
        exit
    end

    opts.parse!
end

# let's go
puts meta_info

if args < 1
    abort("\nError: no arguments passed")
end

if  (@input.end_with? ".sublime-completions") || (@input.end_with? ".json")

    Dir.glob(@input) do |item|

        json = read_json(item)

        if @split == true
            if @output == "cson"
                json_to_cson(json, true)
            else @output == "json"
                json_to_json(json, true)
            end
        else
            if (@output.end_with? ".cson") || (@output == "cson")
                data = json_to_cson(json, false)
                output = get_outname('cson', item)
                
                puts "Writing '#{output}'"
                File.open("./_output/"+output, "w") do |f|
                    f.write(data)
                end

            elsif (@output.end_with? ".json") || (@output == "json")
                data = json_to_json(json, false)
                output = get_outname('json', item)

                puts "Writing '#{output}'"
                File.open("_output/#{output}", "w") do |f|
                    f.write(JSON.pretty_generate(data))
                end
            end
        end

        @input_counter += 1
        @output_counter += 1
    end

elsif (@input.end_with? ".sublime-snippet") || (@input.end_with? ".xml")

    # scope = nil
    # completions = Array.new

    Dir.glob(@input) do |item|

        xml = read_xml(item)

        # if @merge == true
        #     # if @output == "cson"
        #     #     json_to_cson(json, true)
        #     # else @output == "json"
        #     #     json_to_json(json, true)
        #     # end
        #     if @input_counter == 0
        #         scope = get_scope(xml, 'xml')
        #         completions << scope
        #     end
        #     trigger = xml.xpath("//tabTrigger")[0].text.strip
        #     contents = xml.xpath("//content")[0].text.strip

        #     completions << {
        #         trigger => {
        #             :prefix => trigger,
        #             :body => contents
        #         }
        #     }
        # else
            if (@output.end_with? ".cson") || (@output == "cson")
                cson = xml_to_cson(xml)
                output = get_outname('cson', item)

                puts "Writing '#{output}'"
                File.open("./_output/"+output,"w") do |f|
                    f.write(cson)
                end

            elsif (@output.end_with? ".json") || (@output == "json")
                json = xml_to_json(xml)
                
                # match output file to input basename
                if @output == "json"
                    if (@input.start_with? "*.") || ((@input.end_with? ".*"))
                        file = item
                    else
                        file = @input
                    end
                    output = File.basename(file, ".*")+".json"
                end


                puts "Writing '#{output}'"
                File.open("./_output/"+output,"w") do |f|
                    f.write(JSON.pretty_generate(json))
                end
                @output_counter += 1
            end
        end

        @input_counter += 1
        
    # end

    # if @merge == true
    #     output = @output

    #     puts "Writing '#{output}'"
    #     File.open("./_output/"+output,"w") do |f|
    #         f.write(JSON.pretty_generate(completions))
    #     end   
    # end
else
    puts "\nError: Unknown file passed (#{@input})"
end

# Game Over
if @input_counter == 0
    puts "No files converted"
elsif @input_counter == 1
     puts "Read #{@input_counter} file, written #{@output_counter}"
else
    puts "Read #{@input_counter} files, written #{@output_counter}"
end